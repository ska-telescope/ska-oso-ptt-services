#!/usr/bin/env bash

# Shellscript support function file for Javascript Make targets

# Find and load the release support script
CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
. ${CURRENT_SCRIPT_DIR}/.make-release-support

function get_children_pid() {
	local children=$(ps -o pid= --ppid "$1")
	for pid in $children; do
		get_children_pid "$pid"
	done

	echo "$children"
}

function jsServe() {
	if [ -f serve.pid ]; then
		echo "jsServe: already serving with pid $(cat serve.pid)"
		exit 0
	fi

	nohup ${JS_VARS_BEFORE_SERVE} ${JS_COMMAND_RUNNER} ${JS_PACKAGE_MANAGER} ${JS_SERVE_COMMAND} ${JS_SERVE_SWITCHES} &> /dev/null &
	echo $! > serve.pid
	echo "jsServe: started with pid $(cat serve.pid)"

	url="http://localhost:${JS_SERVE_PORT}"
	max_attempts=10
	interval=6
	attempt=1
	echo "jsServe: Waiting for '$url'"
	while [[ $attempt -le $max_attempts ]]; do
		echo "jsServe: Attempt $attempt/$max_attempts"
		if wget --spider -q $url; then
			break
		else
			sleep $interval
		fi
		((attempt++))
	done

	if [[ $attempt -gt $max_attempts ]]; then
		echo "jsServe: Failed to reach endpoint after $max_attempts attempts."
		exit 1
	fi
}

function jsStopServe() {
	if [ -f serve.pid ]; then
		PID=$(cat serve.pid)
		echo "jsStopServe: stopping pid $(cat serve.pid)"
		kill $(get_children_pid $PID) >/dev/null 2>&1
		rm serve.pid
	fi
}

function jsMergeReports() {
	OUTPUT=$1
	INPUT_PATTERN=$2
	${JS_PACKAGE_MANAGER} jrm $OUTPUT $INPUT_PATTERN
}
